
name: Devonn.AI Deploy

on:
  push:
    branches: [main]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    steps:
      - uses: actions/checkout@v3
      
      # Build the extension for deployment
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Set environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          else
            ENV="development"
          fi
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV
          
          if [ "$ENV" == "development" ]; then
            echo "API_URL=http://localhost:8000" >> $GITHUB_ENV
          elif [ "$ENV" == "staging" ]; then 
            echo "API_URL=https://staging-api.devonn.ai" >> $GITHUB_ENV
          else
            echo "API_URL=https://api.devonn.ai" >> $GITHUB_ENV
          fi
      
      - name: Build extension
        run: npm run build:${{ env.ENVIRONMENT }}
      
      - name: Package extension
        run: |
          cd dist
          zip -r ../devonn-ai-${{ env.ENVIRONMENT }}.zip *
      
      - name: Set up Chrome Web Store CLI
        run: npm install -g chrome-webstore-upload-cli
      
      - name: Upload to Chrome Web Store
        if: ${{ github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main' }}
        run: |
          webstore upload --source devonn-ai-${{ env.ENVIRONMENT }}.zip \
            --extension-id ${{ secrets.CHROME_EXTENSION_ID }} \
            --client-id ${{ secrets.CHROME_CLIENT_ID }} \
            --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} \
            --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}
      
      - name: Verify successful upload
        if: ${{ github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main' }}
        run: |
          # Check that the upload was successful
          if [ $? -ne 0 ]; then
            echo "Failed to upload extension to Chrome Web Store"
            exit 1
          fi
          echo "Successfully uploaded extension to Chrome Web Store"
      
      - name: Publish to Chrome Web Store
        if: ${{ github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main' }}
        run: |
          webstore publish \
            --extension-id ${{ secrets.CHROME_EXTENSION_ID }} \
            --client-id ${{ secrets.CHROME_CLIENT_ID }} \
            --client-secret ${{ secrets.CHROME_CLIENT_SECRET }} \
            --refresh-token ${{ secrets.CHROME_REFRESH_TOKEN }}
      
      - name: Create GitHub Release
        if: ${{ github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main' }}
        uses: softprops/action-gh-release@v1
        with:
          files: devonn-ai-${{ env.ENVIRONMENT }}.zip
          name: Release ${{ github.ref_name }}
          tag_name: v${{ github.run_number }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  smoke-test:
    name: Post-Deployment Smoke Test
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check deployed extension
        run: |
          # This would be a script to verify the extension is working in the store
          echo "Running post-deployment verification tests"
          # Add actual verification here
          echo "Extension published successfully!"
          
  notify:
    name: Notify Team
    needs: [deploy, smoke-test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "deployment_status=successful" >> $GITHUB_OUTPUT
          else
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Send deployment notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Deployment ${{ steps.status.outputs.deployment_status }} for Devonn.AI ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
