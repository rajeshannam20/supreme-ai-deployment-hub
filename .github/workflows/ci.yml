name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff src/ tests/

    - name: Run tests with pytest
      env:
        PYTHONPATH: src
      run: |
        pytest tests/ -v --tb=short

    - name: Generate test coverage report
      env:
        PYTHONPATH: src
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage report -m
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check

    - name: Run bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test FastAPI server startup
      env:
        PYTHONPATH: src
      run: |
        timeout 10s uvicorn src.main:app --host 0.0.0.0 --port 8000 || exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "Server started successfully and was terminated after 10 seconds"
          exit 0
        else
          echo "Server failed to start"
          exit 1
        fi

    - name: Build Docker image (if Dockerfile exists)
      if: hashFiles('Dockerfile') != ''
      run: |
        docker build -t supreme-ai-deployment-hub:${{ github.sha }} .
        docker tag supreme-ai-deployment-hub:${{ github.sha }} supreme-ai-deployment-hub:latest

    - name: Create deployment artifact
      run: |
        mkdir -p deployment-package
        cp -r src/ deployment-package/
        cp requirements.txt deployment-package/
        tar -czf deployment-package.tar.gz deployment-package/

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz
        retention-days: 7