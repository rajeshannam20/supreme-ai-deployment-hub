
name: Infrastructure CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - '.github/workflows/infrastructure-ci-cd.yml'
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        
      - name: Terraform Init
        run: terraform init -backend=false
        
      - name: Terraform Validate
        run: terraform validate
  
  security-scan:
    name: Security Scan
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true
      
      - name: Run checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./terraform
          framework: terraform
          soft_fail: true
      
      - name: Run OPA Policy Check
        run: |
          # Install OPA
          curl -L -o opa https://openpolicyagent.org/downloads/v0.43.0/opa_linux_amd64_static
          chmod +x opa
          
          # Run terraform plan
          terraform init -backend=false
          terraform plan -out=tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
          
          # Evaluate policies
          ./opa eval --format pretty --data policy/ --input tfplan.json "data.terraform.aws.rds.deny"
  
  terraform-plan:
    name: Terraform Plan
    needs: [validate, security-scan]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Terraform Init
        run: terraform init
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=environments/${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'development') }}.tfvars -out=tfplan
        
      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: tfplan
          
      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan üìù
            
            <details><summary>Show Plan</summary>
            
            \`\`\`
            ${process.env.PLAN_OUTPUT}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
  
  apply:
    name: Terraform Apply
    needs: terraform-plan
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    concurrency: 
      group: ${{ github.workflow }}-${{ github.event.inputs.environment || 'production' }}
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          
      - name: Terraform Init
        run: terraform init
        
      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan
        
      # Manual approval already handled by environment protection rules
      
      # For production deployments, implement canary strategy
      - name: Implement Canary Deployment
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        run: |
          echo "Implementing canary deployment strategy for production..."
          # Apply changes to a subset of resources first (canary pattern)
          terraform apply -var-file=environments/production.tfvars -target=module.vpc -target=module.eks -auto-approve
          
          echo "Waiting 5 minutes to verify canary deployment..."
          sleep 300
          
          # If no errors, proceed with full deployment
          terraform apply tfplan
      
      # For non-production, apply directly
      - name: Apply Terraform Changes (non-production)
        if: github.event.inputs.environment != 'production' && github.ref != 'refs/heads/main'
        run: terraform apply tfplan
  
  post-deploy-validation:
    name: Post-Deployment Validation
    needs: apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
      
      - name: Run Infrastructure Tests
        run: |
          cd tests/infrastructure
          go mod init infrastructure-tests
          go mod tidy
          go test -v -timeout 30m
      
      - name: Check Database Connectivity
        run: |
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Get RDS endpoint from terraform output
          export DB_ENDPOINT=$(terraform output -raw rds_endpoint)
          export DB_NAME=$(terraform output -raw db_name)
          export DB_USER=$(terraform output -raw db_username)
          
          # Test connection (password would be securely retrieved from secrets manager in real scenario)
          PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h $DB_ENDPOINT -U $DB_USER -d $DB_NAME -c "SELECT 1;"
      
      - name: Check CloudWatch Alarms
        run: |
          aws cloudwatch describe-alarms --state-value ALARM
          # If critical alarms are in ALARM state, this would trigger notification or rollback
      
      - name: Send Deployment Notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Infrastructure deployment to ${{ github.event.inputs.environment || 'production' }} complete! All validation checks passed."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  rollback:
    name: Rollback on Failure
    needs: [apply, post-deploy-validation]
    if: failure() && (github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      
      - name: Terraform Init
        run: terraform init
        
      - name: Rollback to Last Known Good State
        run: |
          echo "Deployment failed! Rolling back to last known good state..."
          terraform workspace select ${{ github.event.inputs.environment || 'production' }}
          terraform plan -refresh-only -var-file=environments/${{ github.event.inputs.environment || 'production' }}.tfvars -out=rollback.tfplan
          terraform apply rollback.tfplan
      
      - name: Send Rollback Notification
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "‚ö†Ô∏è ALERT: Infrastructure deployment to ${{ github.event.inputs.environment || 'production' }} failed! Rollback initiated."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  compliance-check:
    name: Compliance Validation
    needs: [apply]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Run Compliance Checks
        run: |
          # Install prowler for AWS compliance checks
          pip install prowler
          
          # Run compliance checks focused on database services
          prowler aws --services rds --compliance gdpr --output-file compliance-report
      
      - name: Upload Compliance Report
        uses: actions/upload-artifact@v3
        with:
          name: compliance-report
          path: compliance-report*
      
      - name: Generate Compliance Dashboard
        run: |
          # Convert compliance report to dashboard format
          echo "Creating compliance dashboard..."
          # This would typically involve transforming the data and uploading to a dashboard service
